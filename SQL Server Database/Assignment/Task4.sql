--Task-4

--1.Average Ticket Price for Events in Each Venue Using a Subquery
Select v.venue_id,(Select avg(ticket_price) from Event e where e.venue_id=v.venue_id ) from Venue v

--2. Events with More Than 50% of Tickets Sold using subquery
Select event_name from Event where total_seats / 2 < (Select sum(num_tickets) from Booking where Event.event_id = Booking.event_id);

--3. Calculate the Total Number of Tickets Sold for Each Event
Select event_name,(Select sum(num_tickets) from Booking b where b.event_id=e.event_id) as 'Total Tickets Sold' from Event e

--4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
Select customer_id from Customer c where not exists(Select customer_id from Booking b where b.customer_id=c.customer_id)

--5. List Events with No Ticket Sales Using a NOT IN Subquery
Select event_name from Event where event_id not in(Select event_id from Event where available_seats!=total_seats)

--6. Using a subquery to calculate total tickets sold for each event type
Select event_type,sum(total_tickets_sold) as total_tickets_sold from 
(select e.event_type, b.num_tickets as total_tickets_sold from Event e join Booking b on e.event_id = b.event_id) as ticket_summary
group by event_type

--7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause
Select event_name from Event where ticket_price>(select avg(ticket_price) from Event)

--8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery
Select c.customer_id, c.customer_name,(Select sum(b.total_cost) from Booking b where b.customer_id = c.customer_id) as total_revenue
from Customer c;

--9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause
Select customer_name from Customer where customer_id in(Select customer_id from Booking where event_id in
(Select event_id from Event where venue_id=2))

--10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY
Select event_type,(Select sum(b.num_tickets) from Booking b join Event e_sub on b.event_id = e_sub.event_id where e_sub.event_type = e.event_type) AS total_tickets_sold
from Event e group by event_type

--11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT
Select distinct c.customer_id, c.customer_name, format(b.booking_date, 'yyyy-MM') as booking_month from Customer c
join Booking b on c.customer_id = b.customer_id where FORMAT(b.booking_date, 'yyyy-MM') IN (select distinct format(b2.booking_date, 'yyyy-MM')from Booking b2)
order by booking_month, c.customer_id;

--12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery 
Select venue_id,(select avg(ticket_price) from Event e where e.venue_id=v.venue_id) from Venue v group by v.venue_id